---
title: "Hands-on_Ex07: Visualising and Analysing Geographic Data"
author: "Michael Djohan"
date: 23 February 2023
date-modified: "`r Sys.Date()`"
execute: 
  echo: true
  eval: true
  warning: false
format: html
editor: visual
---

## 1. Install and launching R packages

The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R. The R packages installed are:

-   [**sf**](https://cran.r-project.org/web/packages/sf/) for handling geospatial data
-   [**tmap**](https://cran.r-project.org/web/packages/tmap/) to plot functional and truthful choropleth map

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

## 2. Plotting Choropleth Map

Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.

### 2.1 Importing the data

Two data set will be used to create the choropleth map. They are:

-   Master Plan 2014 Subzone Boundary (Web) (i.e. `MP14_SUBZONE_WEB_PL`) in ESRI shapefile format. It can be downloaded at [data.gov.sg](https://data.gov.sg/) This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.

-   Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. `respopagesextod2011to2020.csv`). This is an aspatial data fie. It can be downloaded at [Department of Statistics, Singapore](https://www.singstat.gov.sg/) Although it does not contain any coordinates values, but it's PA and SZ fields can be used as unique identifiers to geocode to `MP14_SUBZONE_WEB_PL` shapefile.

```{r}
mpsz <-  sf::st_read(dsn = "data/geospatial",
                     layer = "MP14_SUBZONE_WEB_PL")

mpsz
```

```{r}
popdata <- read_csv("data/aspatial/respopagesextod2011to2020.csv")
```

### 2.2 Data wrangling

Creating new variables called YOUNG, ECONOMY ACTIVE, and AGED

```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup() %>%
  
  pivot_wider(names_from=AG, 
              values_from=POP) %>%
  
  mutate(YOUNG = rowSums(.[3:6])
         +rowSums(.[12])) %>%
  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+rowSums(.[13:15]))%>%
  mutate(`AGED`=rowSums(.[16:21])) %>%
  mutate(`TOTAL`=rowSums(.[3:21])) %>%  
  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/`ECONOMY ACTIVE`) %>%
  select(`PA`, `SZ`, `YOUNG`, 
       `ECONOMY ACTIVE`, `AGED`, 
       `TOTAL`, `DEPENDENCY`)
```

Before ioining the attribute and geospatial data, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase

```{r}
popdata2020 <- popdata2020 |> 
  mutate_at(.vars = vars(PA, SZ),
            .funs = funs(toupper)) |> 
  
  filter(`ECONOMY ACTIVE` > 0)
```

Next, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier

```{r}
mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))
```

```{r}
write_rds(mpsz_pop2020, "data/rds/mpszpop2020.rds")
```

### 2.3 Plotting the map

#### 2.3.1 Using `qtm()`

Plotting standard choropleth map using `qtm()`

```{r}
#tmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.
tmap_mode("plot")

#fill argument is used to map the attribute (i.e. DEPENDENCY)
qtm(mpsz_pop2020, 
    fill = "DEPENDENCY")
```

#### 2.3.2 Using `tmap()` elements

`tmap` provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks. To specify the method, the style argument of `tm_fill()` or `tm_polygons()` should be used. We can also specify `n` argument to specify the number of classes (i.e., `n = 5`).

We can also specify the category breaks manually by specifying the `breaks` argument of the `tm_fill()`. It is important to note that, in **tmap** the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the *breaks* option (the values must be in increasing order). Example would be `breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)`

```{r}

#tm_shape defines the input data. We can use tm_polygons() to draw the planning subzone polygons
tm_shape(mpsz_pop2020)+
  
#We can assign variable to tm_polygons() like below
  #tm_polygons("DEPENDENCY") 
  
  #tm_fill() ONLY shadses the polygons by using a color scheme
  tm_fill("DEPENDENCY", 
          style = "quantile",
          
          #This is using colorbrewer palette. if We want to reverse the color order, we can add '-' in front of the palette (i.e., "-Blues")
          palette = "Blues",
          title = "Dependency ratio") +
  
  #set the layout
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45, 
            legend.width = 0.35,
            frame = TRUE) +
  
  #tm_borders() draw the borders of the shapefil onto the choropleth map
  #lwd is border line width, col is border color, and lty is the line type
  tm_borders(lwd = 0.1, alpha = 0.5) +
  
  #add compass
  tm_compass(type="8star", size = 2) +
  
  #add scale bar
  tm_scale_bar(width = 0.15) +
  
  #add grid lines
  tm_grid(alpha =0.2) +
  
  #default style
  tmap_style("white") +
  
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS", 
             position = c("left", "bottom"))
```

Specifying map `legends` and `style`

```{r}
tm_shape(mpsz_pop2020)+
  
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "-Greens", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
            main.title.position = "center",
            main.title.size = 1,
            legend.height = 0.45, 
            legend.width = 0.35,
            legend.outside = FALSE,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  
  tm_borders(alpha = 0.5) +
  
  tmap_style("classic")
```

#### 2.3.3 Creating facet choropleth maps

##### 2.3.3.1 By assigning multiple values to at least one of the aesthetic arguments

```{r}
tm_shape(mpsz_pop2020)+
  
  #fill by both Young and Aged and specify ncols = 2
  tm_fill(c("YOUNG", "AGED"),
          style = c("equal", "quantile"), 
          palette = list("Blues", "Greens"),
          ncols = 2) +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) +
  tmap_style("white")
```

##### 2.3.3.2 By defining a group-by variable in `tm_facets()`

```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
          style = "quantile",
          palette = "Blues",
          thres.poly = 0) + 
  
  #use tm_facets() to facet by REGION_N
  tm_facets(by="REGION_N", 
            free.coords=TRUE, 
            drop.shapes=TRUE) +
  
  tm_layout(legend.show = FALSE,
            title.position = c("center", "center"), 
            title.size = 20) +
  
  tm_borders(alpha = 0.5)
```

##### 2.3.3.3 By creating multiple stand-alone maps with `tmap_arrange()`

```{r}
youngmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("YOUNG", 
              style = "quantile", 
              palette = "Blues")

agedmap <- tm_shape(mpsz_pop2020)+ 
  tm_polygons("AGED", 
              style = "quantile", 
              palette = "Blues")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```

#### 2.3.4 Mappping Spatial Object Meeting a Selection Criterion

Instead of creating small multiple choropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.

```{r}
#filter by CENTRAL REGION only
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("DEPENDENCY", 
          style = "quantile", 
          palette = "Blues", 
          legend.hist = TRUE, 
          legend.is.portrait = TRUE,
          legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45, 
            legend.width = 5.0,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```

## 3. Visualising Geospatial Point Data

Proportional symbol maps (also known as graduate symbol maps) are a class of maps that use the visual variable of size to represent differences in the magnitude of a discrete, abruptly changing phenomenon, e.g. counts of people. Like choropleth maps, you can create classed or unclassed versions of these maps. The classed ones are known as range-graded or graduated symbols, and the unclassed are called proportional symbols, where the area of the symbols are proportional to the values of the attribute being mapped. In this hands-on exercise, you will learn how to create a proportional symbol map showing the number of wins by Singapore Pools' outlets using an R package called `tmap`.

### 3.1 Importing the data

The data set use for this hands-on exercise is called *SGPools_svy21*. The data is in csv file format.

Figure below shows the first 15 records of SGPools_svy21.csv. It consists of seven columns. The XCOORD and YCOORD columns are the x-coordinates and y-coordinates of SingPools outlets and branches. They are in [Singapore SVY21 Projected Coordinates System](https://www.sla.gov.sg/sirent/CoordinateSystems.aspx).

Notice that sgpools is aspatial (not based on Geographic Coordinates Systems)

```{r}
sgpools <- read_csv("data/aspatial/SGPools_svy21.csv")
```

```{r}
list(sgpools)
```

### 3.2 Creating a `sf` dataframe from an aspatial data frame

The `st_as_sf()` function adds a new column called geometry which specify the points
```{r}
sgpools_sf <- st_as_sf(sgpools, 
                       
                       #provide column name of the x-coordinates first, followed by y-coordinates
                       coords = c("XCOORD", "YCOORD"),
                       
                       #provide the coordinate systems in epsg format
                       crs= 3414)
```

[EPSG: 3414](https://epsg.io/3414) is Singapore SVY21 Projected Coordinate System. You can search for other country\'s epsg code by refering to [epsg.io](https://epsg.io/).

### 3.3 Plotting the map

```{r}
#make this interactive by setting tmap_mode to "view"
tmap_mode("view")

tm_shape(sgpools_sf)+
  
          #specify colors by the OUTLET TYPE
tm_bubbles(col = "OUTLET TYPE", 
          #make the size proportional to Gp1Gp2 Winnings
          size = "Gp1Gp2 Winnings",
          border.col = "black",
          border.lwd = 1)
```

We can also add tm_facets() which is in sync (zoom and pan settings)

```{r}
tm_shape(sgpools_sf) +
  tm_bubbles(col = "OUTLET TYPE", 
          size = "Gp1Gp2 Winnings",
          border.col = "black",
          border.lwd = 1) +
  tm_facets(by= "OUTLET TYPE",
            nrow = 1,
            sync = TRUE)
```

Switch back to tmap plot mode

```{r}
tmap_mode("plot")
```

