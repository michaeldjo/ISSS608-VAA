---
title: "Hands-on Exercise 9: Information Dashboard Design"
author: "Michael Djohan"
date: 15 March 2023
date-modified: "`r Sys.Date()`"
execute: 
  echo: true
  eval: true
  warning: false
format: html
editor: visual
---

## 1. Install and launching R packages

The code chunk below uses p_load() of pacman package to check if packages are installed in the computer. If they are, then they will be launched into R. The R packages installed are:

-   [gtExtras](https://jthomasmock.github.io/gtExtras/) provides some additional helper functions to assist in creating beautiful tables with [gt](https://gt.rstudio.com/), an R package specially designed for anyone to make wonderful-looking tables using the R programming language.

-   [reactablefmtr](https://kcuilla.github.io/reactablefmtr/) provides various features to streamline and enhance the styling of interactive reactable tables with easy-to-use and highly-customizable functions and themes.

```{r}
pacman::p_load(lubridate, ggthemes, gtExtras, gt, reactablefmtr, tidyverse)
```

## 2. Importing the data and Data Manipulation

For the purpose of this study, a personal database in Microsoft Access mdb format called Coffee Chain will be used.

```{r}
library(RODBC)
con <- odbcDriverConnect("Driver={Microsoft Access Driver (*.mdb, *.accdb)};DBQ=data/Coffee Chain.mdb")
coffeechain <- sqlFetch(con, 'CoffeeChain Query')
write_rds(coffeechain, "data/CoffeeChain.rds")
odbcClose(con)
```

```{r}
head(coffeechain)
```

aggregate Sales and Budgeted Sales at the Product Level

```{r}
product <- coffeechain %>%
  group_by(`Product`) %>%
  summarise(`target` = sum(`Budget Sales`),
            `current` = sum(`Sales`)) %>%
  ungroup()

head(product)
```

## 3. Using ggplot2 functions

### 3.1 Plotting bullet chart

```{r}
ggplot(product, aes(Product, current)) + 
  geom_col(aes(Product, max(target) * 1.01),
           fill="grey85", width=0.85) +
  geom_col(aes(Product, target * 0.75),
           fill="grey60", width=0.85) +
  geom_col(aes(Product, target * 0.5),
           fill="grey50", width=0.85) +
  geom_col(aes(Product, current), 
           width=0.35,
           fill = "black") + 
  geom_errorbar(aes(y = target,
                    x = Product, 
                    ymin = target,
                    ymax= target), 
                width = .4,
                colour = "red",
                size = 1) +
  coord_flip()
```

### 3.2 Plotting sparklines

#### 3.2.1 Data preparation

Group by month and product

```{r}
sales_report <- coffeechain %>%
  filter(Date >= "2013-01-01") %>%
  mutate(Month = month(Date)) %>%
  group_by(Month, Product) %>%
  summarise(Sales = sum(Sales)) %>%
  ungroup() %>%
  select(Month, Product, Sales)

sales_report
```

Compute minimum, maximum, and end of the month sales

```{r}
mins <- group_by(sales_report, Product) %>% 
  slice(which.min(Sales))

maxs <- group_by(sales_report, Product) %>% 
  slice(which.max(Sales))

ends <- group_by(sales_report, Product) %>% 
  filter(Month == max(Month))
```

Compute the 25th and 75th quantiles

```{r}
quarts <- sales_report %>%
  group_by(Product) %>%
  summarise(quart1 = quantile(Sales, 
                              0.25),
            quart2 = quantile(Sales, 
                              0.75)) %>%
  right_join(sales_report)

quarts
```

#### 3.2.2 Plotting the sparklines

```{r}
ggplot(sales_report, aes(x=Month, y=Sales)) + 
  facet_grid(Product ~ ., scales = "free_y") + 
  geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), 
              fill = 'grey90') +
  geom_line(size=0.3) +
  geom_point(data = mins, col = 'red') +
  geom_point(data = maxs, col = 'blue') +
  geom_text(data = mins, aes(label = Sales), vjust = -1) +
  geom_text(data = maxs, aes(label = Sales), vjust = 2.5) +
  geom_text(data = ends, aes(label = Sales), hjust = 0, nudge_x = 0.5) +
  geom_text(data = ends, aes(label = Product), hjust = 0, nudge_x = 1) +
  expand_limits(x = max(sales_report$Month) + 
                  (0.25 * (max(sales_report$Month) - min(sales_report$Month)))) +
  scale_x_continuous(breaks = seq(1, 12, 1)) +
  scale_y_continuous(expand = c(0.1, 0)) +
  theme_tufte(base_size = 3, base_family = "Helvetica") +
  theme(axis.title=element_blank(), axis.text.y = element_blank(), 
        axis.ticks = element_blank(), strip.text = element_blank())
```

## 4. Using gt and gtExtras methods

In this section, you will learn how to create static information dashboard by using [gt](https://gt.rstudio.com/) and [gtExtras](https://jthomasmock.github.io/gtExtras/) packages.

### 4.1 Plotting bullet chart

```{r}
product %>%
  gt::gt() %>%
  gt_plt_bullet(column = current, 
              target = target, 
              width = 60,
              palette = c("lightblue", 
                          "black")) %>%
  gt_theme_538()
```

### 4.2 Plotting sparklines and create sales report

#### 4.2.1 Preparing the data

Group by product and month

```{r}
report <- coffeechain %>%
  mutate(Year = year(Date)) %>%
  filter(Year == "2013") %>%
  mutate (Month = month(Date, 
                        label = TRUE, 
                        abbr = TRUE)) %>%
  group_by(Product, Month) %>%
  summarise(Sales = sum(Sales)) %>%
  ungroup()

report
```

It is important to note that one of the requirement of `gtExtras` functions is that almost exclusively they require you to pass `data.frame` with `list` columns. In view of this, code chunk below will be used to convert the report `data.frame` into `list` columns.

```{r}
report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales), 
            .groups = "drop")
```

#### 4.2.2 Plotting the sparklines

Use the code above to convert the report `data.frame` into `list` columns before applying `gt` functions

```{r}
report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales), 
            .groups = "drop") %>%
   gt() %>%
   gt_plt_sparkline('Monthly Sales')
```

#### 4.2.3 Create the statistics sales report

Use the code above to create the statistic sales report

```{r}
report %>% 
  group_by(Product) %>% 
  summarise("Min" = min(Sales, na.rm = T),
            "Max" = max(Sales, na.rm = T),
            "Average" = mean(Sales, na.rm = T)
            ) %>%
  gt() %>%
  fmt_number(columns = 4,
    decimals = 2)
```

#### 4.2.4 Combining the sales report and sparklines

Firstly, we need to add the min and max to report tibble in `list` format

```{r}
spark <- report %>%
  group_by(Product) %>%
  summarize('Monthly Sales' = list(Sales), 
            .groups = "drop")

spark
```

```{r}
sales <- report %>% 
  group_by(Product) %>% 
  summarise("Min" = min(Sales, na.rm = T),
            "Max" = max(Sales, na.rm = T),
            "Average" = mean(Sales, na.rm = T)
            )

sales
```

Combined the two tibbles

```{r}
sales_data = left_join(sales, spark)
sales_data
```

Plotting the updated data.table

```{r}
sales_data %>%
  gt() %>%
  gt_plt_sparkline('Monthly Sales')
```

### 4.3 Combining bullet charts and sparklines

Modify the data as per Section 2 by aggregating Sales and Budgeted Sales at the Product Level

```{r}
bullet <- coffeechain %>%
  filter(Date >= "2013-01-01") %>%
  group_by(`Product`) %>%
  summarise(`Target` = sum(`Budget Sales`),
            `Actual` = sum(`Sales`)) %>%
  ungroup() 

bullet
```

Use the sales_data created in section 4.2.4

```{r}
sales_data = sales_data %>%
  left_join(bullet)
sales_data
```

```{r}
sales_data %>%
  gt() %>%
  gt_plt_sparkline('Monthly Sales') %>%
  gt_plt_bullet(column = Actual, 
                target = Target, 
                width = 28,
                palette = c("lightblue", 
                          "black")) %>%
  gt_theme_538()
```

## 5. Using reactable and reactablefmtr methods

In this section, we will create interactive information dashboard by using [reactable](https://glin.github.io/reactable/) and [reactablefmtr](https://kcuilla.github.io/reactablefmtr/) packages.

In order to build an interactive sparklines, we need to install dataui R package by using the code chunk below

```{r}
remotes::install_github("timelyportfolio/dataui")
```

```{r}
library(dataui)
```

### 5.1 Plotting sparklines

Use the code to convert the report `data.frame` into `list` columns before applying `gt` functions

```{r}
report1 <- report %>%
  group_by(Product) %>%
  summarize(`Monthly Sales` = list(Sales))

report1
```

Next, [react_sparkline](https://kcuilla.github.io/reactablefmtr/reference/react_sparkline.html) will be to plot the sparklines as shown below.

```{r}
reactable(
  report1,
  defaultPageSize = 13,    #default pagesize is 10
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(
        report1,
        
        #highlight_points is used to show the min and max values points with label argument is used to label firsr and last values
        highlight_points = highlight_points(
          min = "red", max = "blue"),
        labels = c("first", "last"),
        
        #adding reference line
        statline = "mean"
        )
    )
  )
)
```

Instead of reference line, we can also add bandline

```{r}
reactable(
  report1,
  defaultPageSize = 13,    #default pagesize is 10
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkline(
        report1,
        
        #highlight_points is used to show the min and max values points with label argument is used to label firsr and last values
        highlight_points = highlight_points(
          min = "red", max = "blue"),
        labels = c("first", "last"),
        line_width = 1,
        
        #adding bands
        bandline = "innerquartiles",
        bandline_color = "green"
        )
    )
  )
)
```

### 5.2 Plotting sparkbar

```{r}
reactable(
  report1,
  defaultPageSize = 13,
  columns = list(
    Product = colDef(maxWidth = 200),
    `Monthly Sales` = colDef(
      cell = react_sparkbar(
        report1,
        highlight_bars = highlight_bars(
          min = "red", max = "blue"),
        bandline = "innerquartiles",
        statline = "mean")
    )
  )
)
```

