---
title: "Take-home Exercise 4"
subtitle: "Singapore bi-lateral trade performance in 2020 to 2022"
author: "Michael Djohan"
date: 19 February 2023
date-modified: "`r Sys.Date()`"
execute: 
  warning: false
format:
  html:
    code-overflow: wrap
editor: visual
toc-depth: 5
---

## **1. Overview**

This exercise aims to uncover the impact of COVID-19, global economic and political dynamic in 2022 on Singapore bi-lateral trade using time-series visualisation. The visualization is designed using `ggplot2`, its extensions, and `tidyverse` packages.

The original Merchandise Trade dataset was downloaded from [Department of Statistics](https://www.singstat.gov.sg/find-data/search-by-theme/trade-and-investment/merchandise-trade/latest-data) titled *Merchandise Trade by Region/Market*

The file downloaded was *outputFile.xlsx*

The study period is from for **January 2020 to December 2022** period.

## **2. Data Preparation**

### 2.1 Install R packages and import dataset

The code chunk below uses `pacman::p_load()` to check if packages are installed. If they are, they will be launched into R. The packages installed are

-   `readxl`: Used to read data from excel files

-   `knitr`: Used for dynamic report generation

-   `lubridate`: Used to work with date and time

-   `ggHoriPlot`: Used to creating horizon plot

-   `ggthemes`: Provide additional themes for `ggplot2`

-   `patchwork`: Used to combine plots

-   `directlabels`: Add labels directly to plots

-   `ggbraid`: Used to create braided ribbons plot. `remotes::install_github("nsgrantham/ggbraid")` is used to install the package.

-   `CGPfunctions`: Contains `newggslopegraph` to plot slope graph

-   `ggtext`: Used to improve text rendering support for `ggplot2`

-   `gganimate`: Used to create animated plot

-   `ggifski`: Makes smooth GIF animations for rendering of `gganimate`

-   `scales`: Used to rescale and modify labels display

-   `tidyverse`: A collection of core packages designed for data science, used extensively for data preparation and wrangling.

    All packages can be found within CRAN, except for `ggbraid`.

```{r}
#Load packages
pacman::p_load(readxl, knitr, lubridate, ggHoriPlot, ggthemes, patchwork, directlabels, ggbraid, CGPfunctions, ggtext, gganimate, gifski, scales, tidyverse)
```

Import data from excel file using `readxl::read_excel()` and store it in tibble ***sgimport** and **sgexport***.

Note that by choosing the specific range, the period of interest (January 2020 to December 2022) is manually selected.

::: callout-warning
Upon inspection of the excel file, it is noted that ***sgexport*** rows are smaller than ***sgimport***, extending to row 101 instead of 129.
:::

```{r}
#Import data
sgimport <- read_excel("data/outputFile.xlsx", sheet = "T1", range = "A10:AK129" )

sgexport <- read_excel("data/outputFile.xlsx", sheet = "T2", range = "A10:AK101" )
```

Additional data is downloaded from [World Bank](https://data.worldbank.org/country) dataset which lists countries by world regions.

Import data from excel file using `readr::read_csv()` and store it in tibble ***regions***.

This Entity and World_RegionbyWorld_Bank variable is renamed to Countries and Region for easier interpretation and future joins with other tibble.

```{r}
regions <- read_csv("data/world-regions-according-to-the-world-bank.csv", show_col_types = FALSE) |> 
  
  rename(Countries = Entity,
         Region = World_RegionbyWorld_Bank) |> 
  select(Countries, Region)
```

###### 

### 2.2 Data cleaning

Scope of the study is to understand bi-lateral trade of Singapore with countries / trade partners around the world. Hence, we will not include regions (i.e., Asia, Africa) or collection of countries (i.e., European Union or Other Countries In Oceania).

#### 2.2.1 Cleaning the countries data for ***sgimport*** and ***sgexport***

Looking at the ***sgimport*** tibble below, we notice few problems

-   The layout of the tibble is not apt for time series. Ideally the time period needs to be in rows with the countries in column

-   The column names are in string format and needs to be converted to datetime format

-   **Data Series** contain not only countries/trade partners, but also regions or collection of countries

-   The countries name contain string suffix '(Thousand Dollars)' and the values are in ('000) format

::: callout-note
Similar issue is also observed with ***sgexport***
:::

```{r}
kable(head(sgimport))
```

Before doing any pivoting, each individual tibble needs to be tidied up to avoid further complications. The code chunks below perform the required data wrangling to

-   Remove the regions or collection of countries in **Data Series** variable by filtering the first 7 rows out. This is done using `dplyr::filter()`

-   Remove the string '(Thousand Dollars)' from each of the countries' name in . This is done using `str_remove()` function in combination with regular expression `" \\(Thousand Dollars\\)"`. Assign this to new variable **Countries** using `dplyr::mutate()`

    ::: callout-important
    In the next section, we will multiply the values by 1000 to compensate for the loss of string suffix '(Thousand Dollars)'
    :::

-   Remove the old **Data Series** column

The modified tibbles are stored in new tibbles ***sgimport_ctry*** and ***sgexport_ctry*** respectively

```{r}
sgimport_ctry <- sgimport |> 
  
  #remove the first 7 rows, which are Total and non-countries
  filter(!row_number() %in% c(1:7)) |> 
  
  #remove the '(Thousand Dollars)' string from column Data Series and call it Countries
  mutate(Countries = str_remove(`Data Series`, 
                                " \\(Thousand Dollars\\)"), 
         .after = `Data Series`) |> 
  
  #remove 'Data Series' column
  select(-`Data Series`) 
```

```{r}
sgexport_ctry <- sgexport |> 
  
  #remove the first 7 rows, which are Total and non-countries
  filter(!row_number() %in% c(1:7)) |> 
  
  #remove the '(Thousand Dollars)' string from column Data Series and call it Countries
  mutate(Countries = str_remove(`Data Series`, 
                                " \\(Thousand Dollars\\)"), 
         .after = `Data Series`) |> 
  
  #remove 'Data Series' column
  select(-`Data Series`) 
```

#### 2.2.2 Pivot and transform tibbles to time-series layout

Transforming ***sgimport_ctry*** and ***sgexport_ctry*** to time-series layout requires the help of `tidyr::pivot_longer()`, splitting the column string (i.e., '2022 Dec') to **Year** and **Month** variables respectively. To do this, we will use the `names_sep` argument. The values are assigned to new variable **Import_SGD** and **Export_SGD** respectively.

Additionally, `dplyr::mutate()` will be used to

-   Convert **Month** to factors, levelled based on the abbreviation (i.e., 'Jan'). This will allow easy ordering during plotting

-   Convert **Year** to integer for the same purpose as month

-   Create new variable **Month_Year** which is in datetime format to allow time-series plotting. This is done using `lubridate::make_date()` function

-   Multiply the **Import_SGD** and **Export_SGD** values by 1000 to compensate for the loss of string suffix '(Thousand Dollars)'

The modified tibbles are stored in new tibbles ***sgimport_cln*** and ***sgexport_cln*** respectively

See the resulting tibble below; only ***sgimport_cln*** is shown for illustrative purpose as similar treatment is done on ***sgexport_cln***.

```{r}
sgimport_cln <- sgimport_ctry |> 
  
  #pivot_longer to get year and month timeseries
  pivot_longer(cols = !Countries,
               names_to = c("Year", "Month"),
               names_sep = " ",
               values_to = "Import_SGD"
               ) |> 
  
  #Convert Month to factors and Years to integers for ordering purposes
  mutate(Month = factor(Month, levels = month.abb),
         Year = as.integer(Year),
         Month_Year = make_date(Year, Month),
         .before = 1) |> 
  
  #Multiply values by 1000
  mutate(Import_SGD = Import_SGD*1000) 

sgimport_cln
```

```{r}
sgexport_cln <- sgexport_ctry |> 
  
  #pivot_longer to get year and month timeseries
  pivot_longer(cols = !Countries,
               names_to = c("Year", "Month"),
               names_sep = " ",
               values_to = "Export_SGD"
               ) |> 
  
  #Convert Month and Year to factors for ordering purposes
  #Multiply values by 1000
  mutate(Month = factor(Month, levels = month.abb),
         Year = as.integer(Year),
         Month_Year = make_date(Year, Month),
         .before = 1) |> 
  
  mutate(Export_SGD = Export_SGD*1000) 
```

#### 2.2.3 Finding the discrepancies between ***sgimport_cln*** and ***sgexport_cln***

Before joining the two tibbles: ***sgimport_cln*** and ***sgexport_cln***, it is important to recognise that their number of rows are not the same. To detect the difference, a tibble called ***import_vs_export*** is created below to list the countries which appear in ***sgimport_cln*** but not in ***sgexport_cln***.

```{r}
import_vs_export <- setdiff(sgimport_ctry$Countries, sgexport_ctry$Countries) |> 
  enframe(name = NULL, value = "diff") |> 
  arrange(diff)

import_vs_export  |> 
  kable(caption = "Countries in sgimport_cln that is not in sgexport_cln",
               row.names = TRUE)
```

Referring to above list, there are 28 countries with available import data, but has no export data.

::: callout-warning
We cannot assume that the exports are zero, just because there is no available data.
:::

#### 2.2.4 Joining the two tibbles and calculate trade balance and volume

`dplyr::left_join()` function is used to join ***sgimport_cln*** and ***sgexport_cln***. This is especially useful to avoid since ***sgimport_cln*** has more rows than ***sgexport_cln***.

::: callout-tip
`left_join()` **takes all the values from the first tibble, and looks for matches in the second tibble**. If it finds a match, it adds the data from the second table; if not, it adds missing values.
:::

Countries with missing values in **Export_SGD** variable created by left_join() function will be excluded from analysis. As highlighted above, we cannot assume that the exports are zero, just because there is no available data. This is to avoid incomplete data when analysing trade balances. To remove this, ***import_vs_export*** tibble created above will be used to filter out the countries using `dplyr::filter()`.

Beside the countries in ***import_vs_export***, it is noted that the import and export values of "Germany, Democratic Republic Of" are zeroes. This is referring to East Germany, a state that no longer exists since German reunification in 1990. This country is in the tibble as the original dataset tracks Singapore import/export data from 1976. Given the scope of the study from January 2020 onward, we will filter out this country as well using `dplyr::filter()`.

Note that "Other Countries In Oceania" is also removed as it is a collection of countries.

Additional data cleaning required :

-   Shortening the names of some countries like "Germany, Federal Republic Of", "Vietnam, Socialist Republic Of", and "Republic Of Korea". `dplyr::mutate()` is used in conjunction with `case_when()`

-   Create new variable **Trade_Balance_SGD** subtracts **Import_SGD** from **Export_SGD** to indicate whether there is trade surplus or deficit from Singapore point-of-view

-   Create new variable **Trade_Volume_SGD** sums **Export_SGD** with **Import_SGD** as indication of total trade activities

```{r}
sgtrade_cln <- sgimport_cln |> 
  
  #join sgimport_cln with sgexport_cln
  left_join(sgexport_cln, by = c('Countries' = 'Countries', 'Month_Year' = 'Month_Year', 'Month' = 'Month', 'Year' = 'Year')) |> 
  
    #remove countries with non-available export data
  filter(!Countries %in% c(import_vs_export$diff, "Germany, Democratic Republic Of", "Other Countries In Oceania")) |> 
  
  mutate(Countries = case_when(Countries == "Germany, Federal Republic Of" ~ "Germany",
                               Countries == "Vietnam, Socialist Republic Of" ~ "Vietnam",
                               Countries == "Republic Of Korea" ~ "South Korea",
                               TRUE ~ Countries)) |> 
  
  #Calculate trade balance
  mutate(Trade_Balance_SGD = Export_SGD - Import_SGD,
         Trade_Volumes_SGD = Export_SGD + Import_SGD) 

kable(head(sgtrade_cln))
```

#### 2.2.5 Finding top countries by trade volume

Not all countries trade equally with Singapore. Despite performing the extensive data cleaning in the previous sections, there are still 82 countries in the tibble.

```{r}
n_distinct(sgtrade_cln$Countries)
```

In order to limit the scope of the study further, it is desired to calculate the each country trade volume and percentage of total trade volume. This will provide basis to filter out countries that contributed less than 0.05% of total trade volumes to Singapore.

The code chunk below performs:

-   Group ***sgtrade_cln*** by **Countries** and calculate each country's **Total_Trade_Volumes_SGD** using `dplyr::summarise()` function

-   Calculate **Pct_Total_Trade_Volumes** by dividing each country's **Total_Trade_Volumes_SGD** with the sum(**Total_Trade_Volumes_SGD**) using `dplyr::mutate()` function

-   Arrange the countries by **Pct_Total_Trade_Volumes** in descending order and showcase the data

```{r}
sgtrade_top_ctry <- sgtrade_cln |> 
  
  #Group by Countries and calculated Total Trade Volumes of Singapore
  group_by(Countries) |> 
  summarise(Total_Trade_Volumes_SGD = sum(Trade_Volumes_SGD)) |> 
  
  #Calculate the percentage of trade volume each country contributes to Singapore Total
  mutate(Pct_Total_Trade_Volumes = round(Total_Trade_Volumes_SGD*100/sum(Total_Trade_Volumes_SGD), digits = 1)) |> 
  ungroup() |> 
  
  #Arrange the countries based on the percentage
  arrange(desc(Pct_Total_Trade_Volumes))

kable(head(sgtrade_top_ctry))
```

Next, we will filter out countries that contribute less that 0.05% of Singapore total trade using dplyr::filter() function from ***sgtrade_cln***.

::: callout-tip
The newly created variables : **Total_Trade_Volumes_SGD** and **Pct_Total_Trade_Volumes** might be useful for future plots, hence `dplyr::left_join()` function is again used.
:::

By doing this, the number of countries are reduced to 52

```{r}
#Filter out the Countries with Pct_Total_Trade_Volumes < 0.05%
top0.05 <- sgtrade_top_ctry |> 
  filter(Pct_Total_Trade_Volumes > 0.05)

sgtrade_cln <- sgtrade_cln |> 
  filter(Countries %in% top0.05$Countries) |> 
  
#include the Total_Trade_Volumes_SGD and Pct_Total_Trade_Volumes in sgtrade_cln
  left_join(top0.05, by = c('Countries' = 'Countries'))

#finding out the number of distinct countries left
n_distinct(sgtrade_cln$Countries)
```

## **3. Visualisation**

### 3.1 Exploratory Data Visualisation

The plots in this section offer a high-level overview of Singapore's bilateral merchandise trade performance amid Covid-19 recovery, with the aim of identifying general trends through exploratory analysis. Rather than providing detailed analyses for each country, the focus is on identifying broad patterns and relationships. This approach enables the identification of countries of interest, providing context for more focused analyses in the following section.

#### 3.1.1 Overall Singapore Trade Balance

To gain an understanding of import and export trends in Singapore, we will begin with a simple time-series chart covering the period from January 2020 to December 2022.

##### 3.1.1.1 Design Consideration

Instead of using simple line charts, braided ribbon chart is used with the following considerations:

-   Braided ribbon charts helps to visualise the areas between import and export values, highlighting Singapore trade balance

-   Reference line will be provided, representing the average import and export values in 2020, which was a year marked by worldwide lockdowns and reduced economic activity due to the Covid-19 pandemic. This time period has been chosen as a relevant benchmark for understanding the impact of the pandemic on import and export trends.

-   Annotations explaining the events around the world

::: callout-tip
Some details in the plot can help to enhance the visual aesthetics, such as:

-   Useing diverging colorblind friendly palette

-   Display the values in Billions SGD rather than the raw values

-   Using arrows to aid annotations

-   Clear intent in title, highlighting the story
:::

##### 3.1.1.2 Preparation of visualisation

###### [Data Preparation]{.underline}

Three tibbles are created for the following purpose:

-   ***totalsgtrade*** contains the total import and export values by time, irrespective of countries. \
    This is created by grouping ***sgtrade_cln*** data by **Month_Year** and **Year** variables and calculate the total Singapore Import and Export values, irrespective of countries. `dplyr::group_by()` and `dplyr::summarise()` functions are used.

-   ***totalsgtrade_long*** collapses the **Import** and **Export** columns to new variable **Type**. This is used for geom_line to allow plotting different lines and grouped them by color. `tidyr::pivot_longer()` is used to do this.

-   ***avg_total_2020*** creates 1x3 tibble containing the overall average 2020 Singapore import and export values to draw the reference lines. Firstly ***totalsgtrade*** is filtered for `Year == 2020`. It is then grouped and summarised by mean of **Import** and **Export**.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

#Creating new tibbles to be used for geom_line and geom_braid respectively
totalsgtrade <- sgtrade_cln |> 
  group_by(Month_Year, Year) |> 
  summarise(Import = sum(Import_SGD),
            Export = sum(Export_SGD))

totalsgtrade_long <- totalsgtrade |> 
  pivot_longer(cols = !c(Month_Year, Year),
               names_to = "Type",
               values_to = "Values")

avg_total_2020 <- totalsgtrade |> 
  filter(Year == 2020) |> 
  group_by (Year) |> 
  summarise(import = mean(Import),
            export = mean(Export))
```

###### [Plotting the main graph]{.underline}

Three tibbles are created

```{r, Overall Singapore Trade Balance}
#| code-fold: true
#| code-summary: "Show the code"

#Plotting the main plot
br_plot <- ggplot() +
  geom_line(data = totalsgtrade_long,
            aes(x = Month_Year,
                y = Values,
                group = Type,
                color = Type),
            linewidth = 1.2) +
  
  geom_braid(data = totalsgtrade,
             aes(x = Month_Year,
                 ymin = Import,
                 ymax = Export,
                 fill = Import < Export),
             alpha = 0.5) +

#Remove the legend 
  guides(linetype = "none", fill = "none") +
  
#Adding the 'Import' and 'Export' labels at the end of the line charts
  geom_dl(data = totalsgtrade_long,
          aes(x = Month_Year,
              y = Values,
              label = Type,
              color = Type),
          method = list(dl.trans(x = x + 0.2), "last.points", cex = 1)) +
  
  geom_dl(data = totalsgtrade_long,
          aes(x = Month_Year,
              y = Values,
              label = Type,
              color = Type),
          method = list(dl.trans(x = x - 0.2), "first.points", cex = 1)) +
  
#Plotting the reference lines with annotations
  geom_hline(aes(yintercept = avg_total_2020$export), 
             col="#0072B2", 
             linewidth=0.8,
             linetype = "dashed") +
  
  annotate(geom = "text", 
           x=as.Date("2022-12-01"), 
           y=42000000000, 
           label="Avg 2020 Export", 
           size=4, 
           color="#0072B2") +
  
    geom_hline(aes(yintercept = avg_total_2020$import), 
             col="#D55E00", 
             linewidth=0.8,
             linetype = "dashed") +
  
  annotate(geom = "text", 
           x=as.Date("2022-12-01"), 
           y=37500000000, 
           label="Avg 2020 Import", 
           size=4, 
           color="#D55E00") +

#Setting the colors for the main plot  
  scale_color_manual(values = c("#0072B2", "#D55E00"),
                     labels = c("Export", "Import"),
                     name = NULL,
                     guide = "none") +
  
  scale_fill_manual(values = c("#E69F00", "#56B4E9")) +
  
#Adjusting the scale
  scale_x_date(expand = c(0,0),
               limits = c(as.Date("2020-01-01"),as.Date("2023-03-01")),
               date_breaks = "6 month",
               date_labels = "%b %Y") +
  
  scale_y_continuous("Trade Values",
                     labels = function(x){paste0('$', abs(x/1000000000),'B')}) +
  
#Setting the theme
  cowplot::theme_cowplot() +
  
  theme(axis.title.x = element_blank(),
        legend.position = 'top',
        legend.justification = 'center',
        panel.grid.major.y = element_line(color = "grey90", linetype = "solid")) +
  
#Adding title, subtitle, and captions   
  labs(title = "Since early 2021, Singapore's trade activities were recovering from Covid-19\nbut slowed down in mid-2022",
         subtitle = "Total Merchandise Export and Import Trade Value of Singapore (in SGD), 2020-2022",
         caption = "Merchandise Trade by Region/Market from Department of Statistics, Singapore")
```

```{r, Overall Singapore Trade Balance Annotations}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-height: 8
#| fig-width: 10

#Add relevant annotations   
br_plot + annotate(geom = "label",
           x = as.Date("2020-02-01"),
           y = 45000000000,
           label = "Covid19 restriction kicks in\n in Singapore",
           hjust = "left",
           color = "black"
           ) +
  
  annotate(geom = "segment",
           x = as.Date("2020-05-01"), 
           y = 44000000000, 
           xend = as.Date("2020-03-15"),  
           yend = 41500000000,  
           color = "grey40",
           arrow = arrow(type = "closed",
                         length = unit(0.15, "inches"))
           ) +
  
  annotate(geom = "label",
           x = as.Date("2020-07-01"),
           y = 55000000000,
           label = "Trade rebounds\npost-Covid19 relaxation",
           hjust = "left",
           color = "black"
           ) +
  
  annotate(geom = "segment",
           x = as.Date("2020-10-01"), 
           y = 54000000000, 
           xend = as.Date("2021-02-01"),  
           yend = 45000000000,  
           color = "grey40",
           arrow = arrow(type = "closed",
                         length = unit(0.15, "inches"))
           ) +
  
  annotate(geom = "label",
           x = as.Date("2022-01-01"),
           y = 38000000000,
           label = "Start of Russia-Ukraine War",
           hjust = "left",
           color = "black"
           ) +
  
  annotate(geom = "segment",
           x = as.Date("2022-04-01"), 
           y = 38500000000, 
           xend = as.Date("2022-02-01"),  
           yend = 43000000000,  
           color = "grey40",
           arrow = arrow(type = "closed",
                         length = unit(0.15, "inches"))
           ) +
  
  annotate(geom = "label",
           x = as.Date("2022-05-01"),
           y = 45000000000,
           label = "Recession headwinds\nresults in trade slumps",
           hjust = "left",
           color = "black"
           ) +
  
  annotate(geom = "segment",
           x = as.Date("2022-09-01"), 
           y = 46000000000, 
           xend = as.Date("2022-07-01"),  
           yend = 58000000000,  
           color = "grey40",
           arrow = arrow(type = "closed",
                         length = unit(0.15, "inches"))
           ) 

```

#### 3.1.2 Horizon Plots

Provide overview of the trade balance of all the countries. Trellis Line Chart is not a good idea as the scale of trade balances can be very different as we are looking at 52 countries ranging from major trade partners like China to smaller ones like Cyprus

```{r}
#Creating the normalising function
normalit<-function(m){
   (m - min(m))/(max(m)-min(m))
 }
```

Calculating Change in Trade Balance (%)

```{r}
sgtrade_cln_norm <- sgtrade_cln |> 
  mutate(Normalised_Trade_Balance = normalit(Trade_Balance_SGD)) |> 
  arrange(Countries, Month_Year) |> 
  group_by(Countries) |> 
  mutate(Pct_Trade_Balance_Change = round((Trade_Balance_SGD - lag(Trade_Balance_SGD))*100/lag(Trade_Balance_SGD), 2)) |> 
  ungroup()

sgtrade_cln
```

::: panel-tabset
##### Normalised Trade Balance

```{r}
#| code-fold: true
#| code-summary: "Show the code"
cutpoints <- sgtrade_cln_norm  |>  
  mutate(
    outlier = between(
      Normalised_Trade_Balance, 
      quantile(Normalised_Trade_Balance, 0.25, na.rm=T)-
        1.5*IQR(Normalised_Trade_Balance, na.rm=T),
      quantile(Normalised_Trade_Balance, 0.75, na.rm=T)+
        1.5*IQR(Normalised_Trade_Balance, na.rm=T))) %>% 
  filter(outlier)

#origin point - when trade balance is 0
ori <- (0 - min(sgtrade_cln_norm$Trade_Balance_SGD))/(max(sgtrade_cln_norm$Trade_Balance_SGD)-min(sgtrade_cln_norm$Trade_Balance_SGD))

#scales for horizon plot
sca <- seq(range(cutpoints$Normalised_Trade_Balance)[1], 
           range(cutpoints$Normalised_Trade_Balance)[2], 
           length.out = 9)[-4]
```

```{r, Horizon Plot Trade Balance}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-height: 12
#| fig-width: 10
sgtrade_cln_norm$Countries <- fct_reorder(sgtrade_cln_norm$Countries, sgtrade_cln_norm$Pct_Total_Trade_Volumes, .desc = TRUE)

sgtrade_cln_norm |> ggplot() +
  geom_horizon(aes(x = Month_Year,
                   y = Normalised_Trade_Balance,
                   fill = after_stat(Cutpoints)),
               origin = ori, horizonscale = sca,
               show.legend = FALSE) +
  
  scale_fill_hcl(palette = 'RdBu') +
  
  facet_grid(Countries~.) +
  
  theme_few() +
  theme(
    panel.spacing.y=unit(0, "lines"),
    axis.title.x = element_blank(),
    strip.text.y = element_text(size = 7, angle = 0, hjust = 0),
    axis.text.y = element_blank(),
    axis.title.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.border = element_blank(),
    plot.title = element_text(face = "bold")
    ) +
  
  scale_x_date(expand=c(0,0), 
               date_breaks = "6 month",
               date_labels = "%b\n%Y") +
  
  labs(title = "Singapore's trade surplus is decreasing against major partners post Covid-19 recovery, except with\nHong Kong, Indonesia and Thailand",
         subtitle = "Singapore's trade balance against trading partners arranged by trade volumes, 2020 to 2022",
         caption = "Merchandise Trade by Region/Market from Department of Statistics, Singapore") 
  
```

##### Rate of Change of Trade Balance

```{r}
#| code-fold: true
#| code-summary: "Show the code"
cutpoints_roc <- sgtrade_cln_norm  |>  
  mutate(
    outlier = between(
      Pct_Trade_Balance_Change, 
      quantile(Pct_Trade_Balance_Change, 0.25, na.rm=T)-
        1.5*IQR(Pct_Trade_Balance_Change, na.rm=T),
      quantile(Pct_Trade_Balance_Change, 0.75, na.rm=T)+
        1.5*IQR(Pct_Trade_Balance_Change, na.rm=T))) %>% 
  filter(outlier)

#origin point - when trade balance is 0
ori_roc <- sum(range(cutpoints_roc$Pct_Trade_Balance_Change))/2

#scales for horizon plot
sca_roc <- seq(range(cutpoints_roc$Pct_Trade_Balance_Change, na.rm=T)[1], 
           range(cutpoints_roc$Pct_Trade_Balance_Change, na.rm=T)[2], 
           length.out = 9)[-4]
```

```{r, Horizon Plot Trade Balance Change}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-height: 12
#| fig-width: 10
sgtrade_cln_norm$Countries <- fct_reorder(sgtrade_cln_norm$Countries, sgtrade_cln_norm$Pct_Total_Trade_Volumes, .desc = TRUE)

sgtrade_cln_norm |> 
  na.omit() |> 
  ggplot() +
  geom_horizon(aes(x = Month_Year,
                   y = Pct_Trade_Balance_Change,
                   fill = after_stat(Cutpoints)),
               origin = ori_roc, horizonscale = sca_roc,
               show.legend = FALSE) +
  
  scale_fill_hcl(palette = 'RdBu') +
  
  facet_grid(Countries~.) +
  
  theme_few() +
  theme(
    panel.spacing.y=unit(0, "lines"),
    axis.title.x = element_blank(),
    strip.text.y = element_text(size = 7, angle = 0, hjust = 0),
    axis.text.y = element_blank(),
    axis.title.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.border = element_blank(),
    plot.title = element_text(face = "bold")
    ) +
  
  scale_x_date(expand=c(0,0), 
               date_breaks = "6 month",
               date_labels = "%b\n%Y") +
  
  labs(title = "Volatile changes in Singapore's trade balance against major partners, except with\nTaiwan, Hong Kong, and Indonesia",
         subtitle = "Singapore's trade balance change (MoM%) against trading partners arranged by trade volumes, 2020 to 2022",
         caption = "Merchandise Trade by Region/Market from Department of Statistics, Singapore") 
```
:::

Observation Select countries to choose

Major partners (Top 10) - China (trend reversal) - Malaysia (all the way deficit) - USA (positive to negative) - Korea (positive to negative) - Japan (positive to negative)

Other Regional Partners (Interesting patterns) -Australia (activities in 2021) - India (dip around covid years) - Philippines (gain strongly towards end 2022) - New Zealand/Bangladesh (gain strongly towards end 2022) - Cambodia (negative to positive)

Other Major European Partners (Russia War) - Germany - France - UK

Other partners - Brazil, Mexico, Brunei, Ireland, Israel

Others are due to - mid-range - one intensity

Observation Select countries to choose

Major partners (Top 10) - China (trend reversal) - Malaysia (Volatile in 2022) - USA (high volatility) - Korea (high volatility from 2020 to 2021) - Japan (same as Korea as removed) =\> 4

Other Regional Partners (Interesting patterns) -Australia (2021 reversal) - India (nothing interesting) - Philippines (high volatility) - New Zealand/Bangladesh (nothing interesting) - Cambodia (negative to positive) =\> 3

Other Major European Partners (Russia War) - Germany - France - UK =\> 3

Other partners - Volatility is further observed with smaller trading partners - Brazil, Mexico (high volatility towards end 2022), Brunei, Ireland, Israel =\> 5

Others are low intensity or too small in terms of volume

###### 

### 3.2 Bi-lateral Trade of Singapore against selected partners

#### 3.2.1 Singapore Trade Balance Performance

::: panel-tabset
##### Overall Singapore

```{r, Calendar Heatmap Total}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-width: 10
#| fig-height: 3.5

totalsgtrade_calmap <- totalsgtrade |> 
  mutate(Month = factor(format(Month_Year,"%b")), .after = Year) |> 
  mutate(Trade_Balance = (Export - Import)/1000000000)

ggplot(totalsgtrade_calmap |> 
         mutate(Year = factor(Year, levels =c(2022,2021,2020))), 
       aes(x = Month, 
           y = Year, 
           fill = Trade_Balance)) + 
  
geom_tile(color = "white") + 
  
scale_fill_gradientn(name = "Trade Balance (Billions SGD)",
                     colors=c("#D55E00","grey90","#0072B2"),
                     values=rescale(c(min(totalsgtrade_calmap$Trade_Balance),0,max(totalsgtrade_calmap$Trade_Balance))),
                     limits=c(min(totalsgtrade_calmap$Trade_Balance),max(totalsgtrade_calmap$Trade_Balance))) +
coord_equal() +
  
labs(x = NULL, 
     y = NULL, 
     title = "Singapore's trade surplus declines in 2022; turning slightly negative in May 2022",
     subtitle = "Singapore Trade Balance by calendar months, 2020-2022",
     caption = "Merchandise Trade by Region/Market from Department of Statistics, Singapore") +
  
theme_tufte(base_family = "Helvetica") +
  
theme(axis.ticks = element_blank(),
      legend.title = element_text(size = 8),
      legend.text = element_text(size = 6),
      plot.title = element_text(face = "bold"))

```

##### Selected Countries

```{r, Calendar Heatmap by Countries}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-width: 10
#| fig-height: 12

selected_countries = c("Mainland China", "Malaysia", "United States", "South Korea", "Australia", "India", "Philippines", "Cambodia", "Germany", "France", "Switzerland", "United Kingdom", "Mexico", "New Zealand", "Canada", "Brunei Darussalam")

sgtrade_calmap <- sgtrade_cln |> 
  mutate(Trade_Balance = Trade_Balance_SGD/1000000000)

sgtrade_calmap$Countries <- fct_reorder(sgtrade_calmap$Countries, sgtrade_calmap$Pct_Total_Trade_Volumes, .desc = TRUE)

ggplot(sgtrade_calmap |> 
         mutate(Year = factor(Year, levels =c(2022,2021,2020))) |> 
         filter(Countries %in% selected_countries), 
       aes(x = Month, 
           y = Year, 
           fill = Trade_Balance)) + 
  
geom_tile(color = "white") + 
  
scale_fill_gradientn(name = "Trade Balance (Billions SGD)",
                     colors=c("#D55E00","grey90","#0072B2"),
                     values=rescale(c(min(sgtrade_calmap$Trade_Balance),0,max(sgtrade_calmap$Trade_Balance))),
                     limits=c(min(sgtrade_calmap$Trade_Balance),max(sgtrade_calmap$Trade_Balance))) +
coord_equal() +
  
facet_wrap(~Countries, ncol = 2) +
  
labs(x = NULL, 
     y = NULL, 
     title = "Singapore's trade balance post Covid recovery: Turns <span style = 'color:#D55E00'>Negative</span> with China, USA, and South Korea;<br><span style = 'color:#0072B2'>Positive</span> with Cambodia",
     subtitle = "Singapore Trade Balance against selected partners by calendar months, 2020-2022",
     caption = "Merchandise Trade by Region/Market from Department of Statistics, Singapore") +
  
theme_tufte(base_family = "Helvetica") +
  
theme(axis.ticks = element_blank(),
      legend.title = element_text(size = 8),
      legend.text = element_text(size = 6),
      plot.title = element_markdown(face = "bold"))

```
:::

#### 3.2.2 Singapore Trade Export and Import

```{r, Function Singapore Trade Balance Plot}
#| code-fold: true
#| code-summary: "Show the code"

plot_braid_ctry <- function(selected_countries, showlegend) {

sgtrade_cln$Countries <- fct_reorder(sgtrade_cln$Countries, sgtrade_cln$Pct_Total_Trade_Volumes, .desc = TRUE)

#
sgtrade_cln_long <- sgtrade_cln |> 
  select(Month_Year, Countries, Year, Import_SGD, Export_SGD, Pct_Total_Trade_Volumes) |> 
  pivot_longer(cols = c(Import_SGD, Export_SGD),
               names_to = "Type",
               values_to = "Values")

avg_total_ctry_2020 <- sgtrade_cln |> 
  filter(Year == 2020) |> 
  group_by (Year, Countries) |> 
  summarise(import = mean(Import_SGD),
            export = mean(Export_SGD)) |> 
  mutate(Year_date = as.Date(paste(Year, "-01-01", sep = ""))) |> 
  rowwise() |> mutate(min_import_export = min(import, export))


#creating label
label_ctry <- sgtrade_top_ctry |> 
  filter(Countries %in% selected_countries)
  
Ctry_labels <- paste0("\n",label_ctry$Pct_Total_Trade_Volumes,"% of Total Volumes")

appender <- function(string, suffix = Ctry_labels) paste0(string, suffix)


#Plotting
ggplot(data = sgtrade_cln_long |> 
         filter(Countries %in% selected_countries)) +
  
  geom_line(data = sgtrade_cln_long |> 
              filter(Countries %in% selected_countries),
            aes(x = Month_Year,
                y = Values,
                color = Type),
            linewidth = 1.2,
            show.legend = showlegend) +
  
  geom_braid(data = sgtrade_cln |> 
              filter(Countries %in% selected_countries),
             aes(x = Month_Year,
                 ymin = Import_SGD,
                 ymax = Export_SGD,
                 fill = Import_SGD < Export_SGD),
             alpha = 0.5) +
  
  guides(linetype = "none", fill = "none") +
  
  geom_hline(data = avg_total_ctry_2020|> 
              filter(Countries %in% selected_countries),
             aes(yintercept = export), 
             col = "#0072B2",
             linewidth=0.8,
             linetype = "dashed") +
  
  geom_hline(data = avg_total_ctry_2020|> 
               filter(Countries %in% selected_countries),
             aes(yintercept = import), 
             col = "#D55E00",
             linewidth=0.8,
             linetype = "dashed") +
  
  geom_text(data = avg_total_ctry_2020|> 
               filter(Countries %in% selected_countries),
            aes(x = Year_date,
                y = min_import_export - 0.25*min_import_export,
                label = "Avg 2020"),
            size = 3.5,
            nudge_x = +920) +
  
  scale_color_manual(values = c("#0072B2", "#D55E00"),
                     labels = c("Export", "Import"),
                     name = NULL) +
  
  scale_fill_manual(values = c("#E69F00", "#56B4E9")) +
  
  scale_x_date(expand = c(0,0),
               limits = c(as.Date("2020-01-01"),as.Date("2022-12-31")),
               date_breaks = "1 year",
               date_labels = "%Y") +
  
  scale_y_continuous("Trade Values",
                     labels = function(x){paste0('$', abs(x/1000000000),'B')}) +
    
  facet_wrap(vars(Countries), ncol=4, labeller=as_labeller(appender)) +
  
  cowplot::theme_cowplot() +
  
  theme(axis.title.x = element_blank(),
        panel.grid.major.y = element_line(color = "grey90", linetype = "solid"),
        panel.border = element_rect(color = "grey60", linetype = "solid", linewidth = 0.5),
        panel.spacing.x = unit(0,"line"),
        panel.spacing.y = unit(0,"line")) 

}
```

Plotting the graph

```{r, Singapore Trade Balance Plot}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-height: 13
#| fig-width: 10

#Specifying the annotation for p1
p1_text <- data.frame(label = c("Zero Covid Policy\nWar in Ukraine", "", "War in Ukraine", "Covid recovery"),  
                         Countries = c("Mainland China", "Malaysia", "United States", "South Korea"),
                         x = c(as.Date("2021-01-01"), 0, as.Date("2021-01-01"), as.Date("2020-10-01")),
                         y = c(1500000000, 0, 1500000000, 7500000000))

arrowp1<- data.frame(Countries = c("Mainland China", "Malaysia", "United States", "South Korea"),
                      x = c(as.Date("2021-01-01"), 0, as.Date("2021-01-01"), as.Date("2020-10-01")),
                      y = c(2700000000, 0, 2100000000, 7000000000),
                      xend = c(as.Date("2022-02-01"), 0, as.Date("2022-02-01"), as.Date("2021-04-01")),
                      yend = c(4500000000, 0, 4100000000, 2500000000))

p1_text$Countries <- factor(c("Mainland China", "Malaysia", "United States", "South Korea"))

arrowp1$Countries <- factor(c("Mainland China", "Malaysia", "United States", "South Korea"))

#Specifying the annotation for p2
p2_text <- data.frame(label = c("Start of\nrecession", "Covid Waves", "Start of\nrecession", "Reversal in\nBalance"),  
                         Countries = c("Australia", "India", "Philippines", "Cambodia"),
                         x = c(as.Date("2020-08-01"), as.Date("2020-10-01"), as.Date("2020-08-01"), as.Date("2020-09-01")),
                         y = c(2000000000, 2000000000, 2000000000, 2000000000))

arrowp2<- data.frame(Countries = c("Australia", "India", "Philippines", "Cambodia"),
                      x = c(as.Date("2021-02-01"), as.Date("2020-10-01"), as.Date("2021-02-01"), as.Date("2020-09-01")),
                      y = c(2000000000, 1850000000, 2000000000, 1700000000),
                      xend = c(as.Date("2022-07-01"), as.Date("2020-04-01"), as.Date("2022-07-01"), as.Date("2020-10-01")),
                      yend = c(2000000000, 600000000, 1400000000, 200000000))

arrowp2a<- data.frame(Countries = c("Australia", "India", "Philippines", "Cambodia"),
                      x = c(as.Date("1970-01-01"), as.Date("2020-10-01"), 0, 0),
                      y = c(0, 1850000000, 0, 0),
                      xend = c(as.Date("1970-01-01"), as.Date("2021-06-01"), 0, 0),
                      yend = c(0, 1100000000, 0, 0))

p2_text$Countries <- factor(c("Australia", "India", "Philippines", "Cambodia"))

arrowp2$Countries <- factor(c("Australia", "India", "Philippines", "Cambodia"))

arrowp2a$Countries <- factor(c("Australia", "India", "Philippines", "Cambodia"))

#Specifying the annotation for p3
p3_text <- data.frame(label = c("Start of\nrecession", "", "", "Surge in\nExports"),  
                         Countries = c("Germany", "France", "Switzerland", "United Kingdom"),
                         x = c(as.Date("2020-9-01"), 0, 0, as.Date("2022-6-01")),
                         y = c(1700000000, 0, 0, 1700000000))

arrowp3<- data.frame(Countries = c("Germany", "France", "Switzerland", "United Kingdom"),
                      x = c(as.Date("2021-3-01"), 0, 0, as.Date("2022-01-01")),
                      y = c(1700000000, 0, 0, 1700000000),
                      xend = c(as.Date("2022-08-01"), 0, 0, as.Date("2020-09-01")),
                      yend = c(1300000000, 0, 0, 1200000000))

p3_text$Countries <- factor(c("Germany", "France", "Switzerland", "United Kingdom"))

arrowp3$Countries <- factor(c("Germany", "France", "Switzerland", "United Kingdom"))

#Specifying the annotation for p4
p4_text <- data.frame(label = c("Reduced Trade\nDeficit", "Enhanced\nPartnership", "", ""),  
                         Countries = c("Mexico", "New Zealand", "Canada", "Brunei Darussalam"),
                         x = c(as.Date("2020-12-01"), as.Date("2020-10-01"), 0, 0),
                         y = c(600000000, 600000000, 0, 0))

arrowp4<- data.frame(Countries = c("Mexico", "New Zealand", "Canada", "Brunei Darussalam"),
                      x = c(as.Date("2021-9-01"), as.Date("2021-05-01"), 0, 0),
                      y = c(600000000, 600000000, 0, 0),
                      xend = c(as.Date("2022-02-01"), as.Date("2022-03-01"), 0, 0),
                      yend = c(250000000, 300000000, 0, 0))

p4_text$Countries <- factor(c("Mexico", "New Zealand", "Brunei Darussalam", "Canada"))

arrowp4$Countries <- factor(c("Mexico", "New Zealand", "Brunei Darussalam", "Canada"))

#Plotting the graph
p1a <- plot_braid_ctry(c("Mainland China", "Malaysia", "United States", "South Korea"), showlegend = FALSE)
p1 <- p1a + 
  geom_label(data = p1_text,
            aes(x = x,
                y = y,
                label = label)) +
  geom_segment(data = arrowp1, 
               aes(x = x, xend = xend, y = y, yend = yend), 
               colour = "black", alpha=0.9, arrow = arrow(type = "closed",length = unit(0.1, "inches"))) +
  labs(subtitle = "Singapore merchandise trade volume with ***major partners*** rebounds amid Covid-19 recovery, but deficit worsens;<br>recession shrinks trade further in mid-2022") +
  theme(plot.subtitle = element_markdown())

p2a <- plot_braid_ctry(c("Australia", "India", "Philippines", "Cambodia"), showlegend = FALSE)
p2 <- p2a + 
  geom_label(data = p2_text,
            aes(x = x,
                y = y,
                label = label)) +
  geom_segment(data = arrowp2, 
               aes(x = x, xend = xend, y = y, yend = yend), 
               colour = "black", alpha=0.9, arrow = arrow(type = "closed",length = unit(0.1, "inches"))) +
  geom_segment(data = arrowp2a, 
               aes(x = x, xend = xend, y = y, yend = yend), 
               colour = "black", alpha=0.9, arrow = arrow(type = "closed",length = unit(0.1, "inches"))) +
  labs(subtitle = "Exports bounced back with ***other regional partners*** with Covid-19 recovery; but hit by recession in 2022") +
  theme(plot.subtitle = element_markdown())

p3a <- plot_braid_ctry(c("Germany", "France", "Switzerland", "United Kingdom"), showlegend = FALSE)
p3 <- p3a + 
  geom_label(data = p3_text,
            aes(x = x,
                y = y,
                label = label)) +
  geom_segment(data = arrowp3, 
               aes(x = x, xend = xend, y = y, yend = yend), 
               colour = "black", alpha=0.9, arrow = arrow(type = "closed",length = unit(0.1, "inches"))) +
  labs(subtitle = "Imports rise and volatility worsens amid Covid-19 recovery, but exports to ***major European partners*** stay sluggish") +
  theme(plot.subtitle = element_markdown())

p4a <- plot_braid_ctry(c("Mexico", "New Zealand", "Canada", "Brunei Darussalam"), showlegend = FALSE)
p4 <- p4a + 
  geom_label(data = p4_text,
             aes(x = x,
                 y = y,
                 label = label)) +
  geom_segment(data = arrowp4, 
               aes(x = x, xend = xend, y = y, yend = yend), 
               colour = "black", alpha=0.9, arrow = arrow(type = "closed",length = unit(0.1, "inches"))) +
  labs(subtitle = "Trade volume also makes recovery with ***minor partners*** in 2022, with exports growing to Mexico and New Zealand") +
  theme(plot.subtitle = element_markdown())


final_plot <- p1 / p2 / p3 / p4

final_plot + plot_annotation(
  title = "Merchandise <span style = 'color:#0072B2'>Export</span> and <span style = 'color:#D55E00'>Import</span> Trade Values of Singapore (in SGD)<br>by selected trading partners, 2020-2022",
  caption = "Merchandise Trade by Region/Market from Department of Statistics, Singapore",
  theme = theme(plot.title = element_markdown(face = "bold", size = 18))
)

```

#### 3.2.3 Year-over-Year changes between 2020 and 2022

Choose Q3 as Q3 2020 is during the major lockdowns around the world and it is just prior to recession in 2022. Providing a bit of stability in the data

Modifying the data

```{r}
sgtrade_cln_qtr <- sgtrade_cln |> 
  mutate(Quarter = factor(paste0("Q", quarter(Month_Year), " ", year(Month_Year))), .after = Month) |> 
  filter(Quarter %in% c("Q3 2020", "Q3 2022")) |> 
  group_by(Countries, Quarter) |> 
  summarise(Total_Trade_Balance_BSGD = round(sum(Trade_Balance_SGD)/1000000000, 2),
            Total_Trade_Volumes_BSGD = round(sum(Trade_Volumes_SGD)/1000000000, 2),
            Total_Import_BSGD = round(sum(Import_SGD)/1000000000, 2),
            Total_Export_BSGD = round(sum(Export_SGD)/1000000000, 2))

sgtrade_cln_qtr
```

Creating function to plot Trade Balances

::: panel-tabset
##### Trade Volume

```{r, Function Trade Volume Slope Graph}
plot_slopegraph_tradevol <- function(selected_countries) {
  
  custom_colors_tradevol <- sgtrade_cln_qtr |> 
    pivot_wider(id_cols = Countries,
                names_from = Quarter,
                values_from = Total_Trade_Volumes_BSGD) |> 
    mutate(diff_Total_Trade_Volumes = `Q3 2022` - `Q3 2020`) |> 
    mutate(col_Total_Trade_Volumes = case_when(
      diff_Total_Trade_Volumes > 5 ~"#0072B2",
      diff_Total_Trade_Volumes <= -3 ~"#D55E00",
      TRUE ~ "grey"
    )) |> 
    select(Countries, col_Total_Trade_Volumes) |> 
    deframe()
  
  newggslopegraph(dataframe = sgtrade_cln_qtr |> 
                    filter(Countries %in% selected_countries),
                  Times = Quarter,
                  Measurement = Total_Trade_Volumes_BSGD,
                  Grouping = Countries,
                  Title = "Y-o-Y Change in Singapore Merchandise Trade Volumes (Billion SGD)",
                  SubTitle = "Q3 2020 to Q3 2022",
                  Caption = "Merchandise Trade by Region/Market from Department of Statistics, Singapore",
                  LineColor = custom_colors_tradevol,
                  LineThickness = 0.7,
                  ThemeChoice = "gdocs",
                  WiderLabels = TRUE)
}
```

##### Import

```{r, Function Import Slope Graph}
plot_slopegraph_import <- function(selected_countries) {
  
  custom_colors_import <- sgtrade_cln_qtr |> 
    pivot_wider(id_cols = Countries,
                names_from = Quarter,
                values_from = Total_Import_BSGD) |> 
    mutate(diff_Total_Import = `Q3 2022` - `Q3 2020`) |> 
    mutate(col_Total_Import = case_when(
      diff_Total_Import > 1 ~"#D55E00",
      diff_Total_Import <= -1 ~"#0072B2",
      TRUE ~ "grey"
    )) |> 
    select(Countries, col_Total_Import) |> 
    deframe()
  
  newggslopegraph(dataframe = sgtrade_cln_qtr |> 
                    filter(Countries %in% selected_countries),
                  Times = Quarter,
                  Measurement = Total_Import_BSGD,
                  Grouping = Countries,
                  Title = "Y-o-Y Change in Singapore Merchandise Import Values (Billion SGD)",
                  SubTitle = "Q3 2020 to Q3 2022",
                  Caption = "Merchandise Trade by Region/Market from Department of Statistics, Singapore",
                  LineColor = custom_colors_import,
                  LineThickness = 0.7,
                  ThemeChoice = "gdocs",
                  WiderLabels = TRUE)
}
```

##### Export

```{r, Function Export Slope Graph}
plot_slopegraph_export <- function(selected_countries) {
  
  custom_colors_export <- sgtrade_cln_qtr |> 
    pivot_wider(id_cols = Countries,
                names_from = Quarter,
                values_from = Total_Export_BSGD) |> 
    mutate(diff_Total_Export = `Q3 2022` - `Q3 2020`) |> 
    mutate(col_Total_Export = case_when(
      diff_Total_Export > 1 ~"#0072B2",
      diff_Total_Export <= -1 ~"#D55E00",
      TRUE ~ "grey"
    )) |> 
    select(Countries, col_Total_Export) |> 
    deframe()
  
  newggslopegraph(dataframe = sgtrade_cln_qtr |> 
                    filter(Countries %in% selected_countries),
                  Times = Quarter,
                  Measurement = Total_Export_BSGD,
                  Grouping = Countries,
                  Title = "Y-o-Y Change in Singapore Merchandise Export Values (Billion SGD)",
                  SubTitle = "Q3 2020 to Q3 2022",
                  Caption = "Merchandise Trade by Region/Market from Department of Statistics, Singapore",
                  LineColor = custom_colors_export,
                  LineThickness = 0.7,
                  ThemeChoice = "gdocs",
                  WiderLabels = TRUE)
}
```

##### Trade Balance

```{r, Function Trade Balance Slope Graph}
plot_slopegraph_tradebal <- function(selected_countries) {
  
  custom_colors_tradebal <- sgtrade_cln_qtr |> 
    pivot_wider(id_cols = Countries,
                names_from = Quarter,
                values_from = Total_Trade_Balance_BSGD) |> 
    mutate(diff_Total_Trade_Balance = `Q3 2022` - `Q3 2020`) |> 
    mutate(col_Total_Trade_Balance = case_when(
      diff_Total_Trade_Balance > 0.5 ~"#0072B2",
      diff_Total_Trade_Balance <= -0.5 ~"#D55E00",
      TRUE ~ "grey"
    )) |> 
    select(Countries, col_Total_Trade_Balance) |> 
    deframe()
  
  newggslopegraph(dataframe = sgtrade_cln_qtr |> 
                    filter(Countries %in% selected_countries),
                  Times = Quarter,
                  Measurement = Total_Trade_Balance_BSGD,
                  Grouping = Countries,
                  Title = "Y-o-Y Change in Singapore Merchandise Trade Balance (Billion SGD)",
                  SubTitle = "Q3 2020 to Q3 2022",
                  Caption = "Merchandise Trade by Region/Market from Department of Statistics, Singapore",
                  LineColor = custom_colors_tradebal,
                  LineThickness = 0.7,
                  ThemeChoice = "gdocs",
                  WiderLabels = TRUE)
}
```
:::

::: panel-tabset
##### Trade Volume

```{r, Trade Volume Slope Graph}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-height: 10
#| fig-width: 8
plot_slopegraph_tradevol(c("Mainland China", "Malaysia", "United States", "South Korea", "Australia", "India", "Philippines", "Cambodia", "Germany", "France", "Switzerland", "United Kingdom", "Mexico", "New Zealand", "Canada", "Brunei Darussalam"))
```

##### Import

```{r, Import Slope Graph}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-height: 10
#| fig-width: 8
plot_slopegraph_import(c("Mainland China", "Malaysia", "United States", "South Korea", "Australia", "India", "Philippines", "Cambodia", "Germany", "France", "Switzerland", "United Kingdom", "Mexico", "New Zealand", "Canada", "Brunei Darussalam"))
```

##### Export

```{r, Export Slope Graph}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-height: 10
#| fig-width: 8
plot_slopegraph_export(c("Mainland China", "Malaysia", "United States", "South Korea", "Australia", "India", "Philippines", "Cambodia", "Germany", "France", "Switzerland", "United Kingdom", "Mexico", "New Zealand", "Canada", "Brunei Darussalam"))
```

##### Trade Balance

```{r, Trade Balance Slope Graph}
#| code-fold: true
#| code-summary: "Show the code"
#| fig-height: 10
#| fig-width: 8
plot_slopegraph_tradebal(c("Mainland China", "Malaysia", "United States", "South Korea", "Australia", "India", "Philippines", "Cambodia", "Germany", "France", "Switzerland", "United Kingdom", "Mexico", "New Zealand", "Canada", "Brunei Darussalam"))
```
:::

###### 

### 3.3 Changes in Import and Export over time

#### 3.3.1 Data Preparation

```{r}
#| code-fold: true
#| code-summary: "Show the code"
regions_cln <- regions |> 
    mutate(Countries = case_when(Countries == "Brunei" ~ "Brunei Darussalam",
                                 Countries == "Czechia" ~ "Czech Republic",
                                 Countries == "China" ~ "Mainland China",
                                 TRUE~Countries))

sgtrade_cln_ani <- sgtrade_cln |> 
  select(Month_Year, Countries, Import_SGD, Export_SGD, Trade_Volumes_SGD) |> 
  
  mutate(Import_SGD = round(Import_SGD/1000000000, 1),
         Export_SGD = round(Export_SGD/1000000000, 1),
         Trade_Volumes_SGD = round(Trade_Volumes_SGD/1000000000, 1)) |> 
  
  left_join(regions_cln, by = c('Countries' = 'Countries'))

sgtrade_cln_ani
```

#### 3.3.2 Building the plot

```{r, Changes in Import and Export over time}
#| code-fold: true
#| code-summary: "Show the code"
#| eval: false

pa <- ggplot(data = sgtrade_cln_ani,
       aes(x = Import_SGD,
           y = Export_SGD,
           color = Region)) +
  
  geom_point(aes(size = Trade_Volumes_SGD),
             alpha = 0.7,
             show.legend = F) +
  
  geom_abline(intercept = 0, 
              slope = 1,
              linewidth = 0.7,
              alpha = 0.7,
              linetype = "dashed",
              col = "grey40") +
  
  geom_label(aes(label = Countries,
                      group = Countries),
                  show.legend = FALSE,
                  size = 3) +
  
  scale_size(range = c(5,45)) +
  
  scale_x_log10() +
  scale_y_log10() +
  
  labs(title = 'Singapore Merchandise Export vs Import Trade Values from 2020 to 2022',
       subtitle = "Period: {format(frame_time, '%b %Y')}",
       x = 'Import (Billion SGD)', 
       y = 'Export (Billion SGD)') +
  
  theme(plot.title = element_text(size = 18, face = "bold")) +
  
  transition_time(Month_Year) + 
  
  ease_aes('linear') 

animate(pa, 
        duration = 25, #12 months/Year x 3 years x 0.7 sec/months = 18 seconds
        height = 800, 
        width = 800,
        fps = 30) 
```
